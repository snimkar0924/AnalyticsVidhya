predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
head(predicted, n=20)
write.csv(cbind.data.frame(actual, predicted),'./data/bmodel.csv')
summary(model1)
model2<-glm(formula = trngData$d_loan_status
~trngData$d_married
+trngData$d_education
+trngData$d_rural-1,
data=trngData, family="binomial")
summary(model2)
N-R
N
N<-nrow(loandata_A)
N-R
trngData<-loandata_A[(N-R+1):N,]
valdtnData<-loandata_A[1:(N-R),]
md.pattern(trngData)
mice_plot1 <- aggr(trngData, col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(trngData), cex.axis=.7,
gap=3, ylab=c("Missing data","Pattern"))
md.pattern(valdtnData)
mice_plot2 <- aggr(valdtnData, col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(valdtnData), cex.axis=.7,
gap=3, ylab=c("Missing data","Pattern"))
model1<-glm(formula = trngData$d_loan_status
~trngData$d_gender
+trngData$d_married
+trngData$d_dependents
+trngData$d_education
+trngData$d_self_employed
+trngData$ApplicantIncome
+trngData$CoapplicantIncome
+trngData$d_urban
+trngData$d_rural-1,
data=trngData, family="binomial")
summary(model1)
model2<-glm(formula = trngData$d_loan_status
~trngData$d_married
+trngData$d_education
+trngData$d_urban-1,
data=trngData, family="binomial")
summary(model2)
model2<-glm(formula = trngData$d_loan_status
~trngData$d_married
+trngData$d_education
+trngData$d_urban-1,
data=trngData, family="binomial")
summary(model2)
cfs<-coef(model2)
cfs
bmodel<-1/(1+exp(-1*(cfs[1]*valdtnData$d_married
+cfs[2]*valdtnData$d_education
+cfs[3]*valdtnData$d_urban)))
length(bmodel)
plot(bmodel)
actual<-valdtnData$d_loan_status
length(actual[actual==1])
length(actual[actual==0])
threshold<-0.6
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
threshold<-0.7
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
threshold<-0.75
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
threshold<-0.6
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
threshold<-0.65
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
write.csv(cbind.data.frame(actual, predicted),'./data/bmodel.csv')
write.csv(cbind.data.frame(actual, predicted),'./data/bmodel.csv')
threshold<-0.55
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
head(predicted, n=20)
threshold<-0.8
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
threshold<-0.67
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
threshold<-0.62
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
threshold<-0.65
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
threshold<-0.67
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
threshold<-0.66
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
threshold<-0.65
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
actual[actual==1]
actual[actual==0]
data(Titanic)
din(Titanic)
dim(Titanic)
read_and_prepare_titanic_dataset <- function(f)
{
df <- read.table(f, header = TRUE, sep=",", stringsAsFactors = FALSE)
df$pclass <- as.factor(df$pclass)
df$survived <- as.factor(df$survived)
df$sex <- as.factor(df$sex)
df <- df[,c("survived","pclass","sex","age","sibsp","parch")]
df <- df[complete.cases(df),]
return(df)
}
read_and_prepare_titanic_dataset(Titanic)
class(Titanic)
df<-as.data.frame(Titanic)
dim(df)
head(df)
dim(df)
head(Titanic)
dim(Titanic)
Titanic[1][1][1][1]
Titanic[1]
Titanic[1][1]
library(pROC)
install.packages("pROC")
library(pROC)
auc(actual, predicted)
threshold<-0.7
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
auc(actual, predicted)
threshold<-0.72
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
auc(actual, predicted)
threshold<-0.67
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
auc(actual, predicted)
auc(actual, predicted)
threshold<-0.65
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
auc(actual, predicted)
threshold<-0.7
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
auc(actual, predicted)
model3<-glm(formula = trngData$d_loan_status
~trngData$d_gender
+trngData$d_married
+trngData$d_dependents
+trngData$d_education
+trngData$d_self_employed
+trngData$ApplicantIncome
+trngData$CoapplicantIncome
+trngData$d_urban
+trngData$d_rural-1,
data=trngData, family="binomial")
summary(model3)
N<-nrow(loandata_A)
R<-round(N*0.6)
N-R
R
R<-round(N*0.65)
R
N-R
trngData<-loandata_A[(N-R+1):N,]
valdtnData<-loandata_A[1:(N-R),]
md.pattern(trngData)
mice_plot1 <- aggr(trngData, col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(trngData), cex.axis=.7,
gap=3, ylab=c("Missing data","Pattern"))
md.pattern(valdtnData)
mice_plot2 <- aggr(valdtnData, col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(valdtnData), cex.axis=.7,
gap=3, ylab=c("Missing data","Pattern"))
model1<-glm(formula = trngData$d_loan_status
~trngData$d_gender
+trngData$d_married
+trngData$d_dependents
+trngData$d_education
+trngData$d_self_employed
+trngData$ApplicantIncome
+trngData$CoapplicantIncome
+trngData$d_urban
+trngData$d_rural-1,
data=trngData, family="binomial")
summary(model1)
model2<-glm(formula = trngData$d_loan_status
~trngData$d_married
+trngData$d_education
+trngData$d_urban-1,
data=trngData, family="binomial")
summary(model2)
model3<-glm(formula = trngData$d_loan_status
~trngData$d_gender
+trngData$d_married
+trngData$d_dependents
+trngData$d_education
+trngData$d_self_employed
+trngData$ApplicantIncome
+trngData$CoapplicantIncome
+trngData$d_urban
+trngData$d_rural-1,
data=trngData, family="binomial")
summary(model3)
model3<-glm(formula = trngData$d_loan_status
~trngData$d_gender
+trngData$d_married
+trngData$d_education
+trngData$d_self_employed
+trngData$ApplicantIncome
+trngData$d_urban
+trngData$d_rural-1,
data=trngData, family="binomial")
summary(model3)
model3<-glm(formula = trngData$d_loan_status
~trngData$d_gender
+trngData$d_married
+trngData$d_education
+trngData$d_self_employed
+trngData$ApplicantIncome
+trngData$d_urban-1,
data=trngData, family="binomial")
summary(model3)
model3<-glm(formula = trngData$d_loan_status
~trngData$d_gender
+trngData$d_married
+trngData$d_education
+trngData$ApplicantIncome
+trngData$d_urban
+trngData$d_rural-1,
data=trngData, family="binomial")
summary(model3)
model3<-glm(formula = trngData$d_loan_status
~trngData$d_gender
+trngData$d_married
+trngData$d_education
+trngData$d_urban
+trngData$d_rural-1,
data=trngData, family="binomial")
summary(model3)
model2<-glm(formula = trngData$d_loan_status
~trngData$d_married
+trngData$d_education
+trngData$d_urban-1,
data=trngData, family="binomial")
summary(model2)
model3<-glm(formula = trngData$d_loan_status
~trngData$d_married
+trngData$d_education
+trngData$d_urban
+trngData$d_rural-1,
data=trngData, family="binomial")
summary(model3)
summary(model2)
summary(model3)
cfs<-coef(model2)
cfs<-coef(model3)
cfs
bmodel<-1/(1+exp(-1*(cfs[1]*valdtnData$d_married
+cfs[2]*valdtnData$d_education
+cfs[2]*valdtnData$d_urban
+cfs[3]*valdtnData$d_rural)))
length(bmodel)
head(bmodel, n=20)
plot(bmodel)
actual<-valdtnData$d_loan_status
length(actual[actual==1])
length(actual[actual==0])
threshold<-0.6
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
threshold<-0.65
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
threshold<-0.7
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
auc(actual, predicted)
threshold<-0.6
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
auc(actual, predicted)
threshold<-0.65
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
auc(actual, predicted)
length(predicted[predicted==1])
length(predicted[predicted==0])
threshold<-0.6
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
threshold<-0.58
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
threshold<-0.67
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
threshold<-0.66
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
threshold<-0.6
predicted<-c()
predicted[bmodel>threshold]<-1
predicted[bmodel<=threshold]<-0
length(predicted[predicted==1])
length(predicted[predicted==0])
head(predicted, n=20)
auc(actual, predicted)
calculate_roc <- function(df, cost_of_fp, cost_of_fn, n=100) {
tpr <- function(df, threshold) {
sum(df$pred >= threshold & df$survived == 1) / sum(df$survived == 1)
}
fpr <- function(df, threshold) {
sum(df$pred >= threshold & df$survived == 0) / sum(df$survived == 0)
}
cost <- function(df, threshold, cost_of_fp, cost_of_fn) {
sum(df$pred >= threshold & df$survived == 0) * cost_of_fp +
sum(df$pred < threshold & df$survived == 1) * cost_of_fn
}
roc <- data.frame(threshold = seq(0,1,length.out=n), tpr=NA, fpr=NA)
roc$tpr <- sapply(roc$threshold, function(th) tpr(df, th))
roc$fpr <- sapply(roc$threshold, function(th) fpr(df, th))
roc$cost <- sapply(roc$threshold, function(th) cost(df, th, cost_of_fp, cost_of_fn))
return(roc)
}
plot_roc <- function(roc, threshold, cost_of_fp, cost_of_fn) {
library(gridExtra)
norm_vec <- function(v) (v - min(v))/diff(range(v))
idx_threshold = which.min(abs(roc$threshold-threshold))
col_ramp <- colorRampPalette(c("green","orange","red","black"))(100)
col_by_cost <- col_ramp[ceiling(norm_vec(roc$cost)*99)+1]
p_roc <- ggplot(roc, aes(fpr,tpr)) +
geom_line(color=rgb(0,0,1,alpha=0.3)) +
geom_point(color=col_by_cost, size=4, alpha=0.5) +
coord_fixed() +
geom_line(aes(threshold,threshold), color=rgb(0,0,1,alpha=0.5)) +
labs(title = sprintf("ROC")) + xlab("FPR") + ylab("TPR") +
geom_hline(yintercept=roc[idx_threshold,"tpr"], alpha=0.5, linetype="dashed") +
geom_vline(xintercept=roc[idx_threshold,"fpr"], alpha=0.5, linetype="dashed")
p_cost <- ggplot(roc, aes(threshold, cost)) +
geom_line(color=rgb(0,0,1,alpha=0.3)) +
geom_point(color=col_by_cost, size=4, alpha=0.5) +
labs(title = sprintf("cost function")) +
geom_vline(xintercept=threshold, alpha=0.5, linetype="dashed")
sub_title <- sprintf("threshold at %.2f - cost of FP = %d, cost of FN = %d", threshold, cost_of_fp, cost_of_fn)
grid.arrange(p_roc, p_cost, ncol=2, sub=textGrob(sub_title, gp=gpar(cex=1), just="bottom"))
}
roc <- calculate_roc(cbind.data.frame(actual, predicted), 1, 2, n = 100)
roc
plot_roc(roc, 0.7, 1, 2)
install.packages("gridExtra")
roc <- calculate_roc(cbind.data.frame(actual, predicted), 1, 2, n = 100)
plot_roc(roc, 0.7, 1, 2)
roc
df<-cbind.data.frame(actual, predicted)
colnames(df)<-c('survived','pred')
head(df)
roc <- calculate_roc(df, 1, 2, n = 100)
head(roc)
plot_roc(roc, 0.7, 1, 2)
plot_roc <- function(roc, threshold, cost_of_fp, cost_of_fn) {
library(gridExtra)
norm_vec <- function(v) (v - min(v))/diff(range(v))
idx_threshold = which.min(abs(roc$threshold-threshold))
col_ramp <- colorRampPalette(c("green","orange","red","black"))(100)
col_by_cost <- col_ramp[ceiling(norm_vec(roc$cost)*99)+1]
p_roc <- ggplot(roc, aes(fpr,tpr)) +
geom_line(color=rgb(0,0,1,alpha=0.3)) +
geom_point(color=col_by_cost, size=4, alpha=0.5) +
coord_fixed() +
geom_line(aes(threshold,threshold), color=rgb(0,0,1,alpha=0.5)) +
labs(title = sprintf("ROC")) + xlab("FPR") + ylab("TPR") +
geom_hline(yintercept=roc[idx_threshold,"tpr"], alpha=0.5, linetype="dashed") +
geom_vline(xintercept=roc[idx_threshold,"fpr"], alpha=0.5, linetype="dashed")
p_cost <- ggplot2(roc, aes(threshold, cost)) +
geom_line(color=rgb(0,0,1,alpha=0.3)) +
geom_point(color=col_by_cost, size=4, alpha=0.5) +
labs(title = sprintf("cost function")) +
geom_vline(xintercept=threshold, alpha=0.5, linetype="dashed")
sub_title <- sprintf("threshold at %.2f - cost of FP = %d, cost of FN = %d", threshold, cost_of_fp, cost_of_fn)
grid.arrange(p_roc, p_cost, ncol=2, sub=textGrob(sub_title, gp=gpar(cex=1), just="bottom"))
}
plot_roc(roc, 0.7, 1, 2)
plot_roc(roc, 0.7, 1, 2)
plot_roc <- function(roc, threshold, cost_of_fp, cost_of_fn) {
library(gridExtra)
norm_vec <- function(v) (v - min(v))/diff(range(v))
idx_threshold = which.min(abs(roc$threshold-threshold))
col_ramp <- colorRampPalette(c("green","orange","red","black"))(100)
col_by_cost <- col_ramp[ceiling(norm_vec(roc$cost)*99)+1]
p_roc <- ggplot2(roc, aes(fpr,tpr)) +
geom_line(color=rgb(0,0,1,alpha=0.3)) +
geom_point(color=col_by_cost, size=4, alpha=0.5) +
coord_fixed() +
geom_line(aes(threshold,threshold), color=rgb(0,0,1,alpha=0.5)) +
labs(title = sprintf("ROC")) + xlab("FPR") + ylab("TPR") +
geom_hline(yintercept=roc[idx_threshold,"tpr"], alpha=0.5, linetype="dashed") +
geom_vline(xintercept=roc[idx_threshold,"fpr"], alpha=0.5, linetype="dashed")
p_cost <- ggplot2(roc, aes(threshold, cost)) +
geom_line(color=rgb(0,0,1,alpha=0.3)) +
geom_point(color=col_by_cost, size=4, alpha=0.5) +
labs(title = sprintf("cost function")) +
geom_vline(xintercept=threshold, alpha=0.5, linetype="dashed")
sub_title <- sprintf("threshold at %.2f - cost of FP = %d, cost of FN = %d", threshold, cost_of_fp, cost_of_fn)
grid.arrange(p_roc, p_cost, ncol=2, sub=textGrob(sub_title, gp=gpar(cex=1), just="bottom"))
}
plot_roc(roc, 0.7, 1, 2)
plot_roc <- function(roc, threshold, cost_of_fp, cost_of_fn) {
library(gridExtra)
library(ggplot2)
norm_vec <- function(v) (v - min(v))/diff(range(v))
idx_threshold = which.min(abs(roc$threshold-threshold))
col_ramp <- colorRampPalette(c("green","orange","red","black"))(100)
col_by_cost <- col_ramp[ceiling(norm_vec(roc$cost)*99)+1]
p_roc <- ggplot(roc, aes(fpr,tpr)) +
geom_line(color=rgb(0,0,1,alpha=0.3)) +
geom_point(color=col_by_cost, size=4, alpha=0.5) +
coord_fixed() +
geom_line(aes(threshold,threshold), color=rgb(0,0,1,alpha=0.5)) +
labs(title = sprintf("ROC")) + xlab("FPR") + ylab("TPR") +
geom_hline(yintercept=roc[idx_threshold,"tpr"], alpha=0.5, linetype="dashed") +
geom_vline(xintercept=roc[idx_threshold,"fpr"], alpha=0.5, linetype="dashed")
p_cost <- ggplot(roc, aes(threshold, cost)) +
geom_line(color=rgb(0,0,1,alpha=0.3)) +
geom_point(color=col_by_cost, size=4, alpha=0.5) +
labs(title = sprintf("cost function")) +
geom_vline(xintercept=threshold, alpha=0.5, linetype="dashed")
sub_title <- sprintf("threshold at %.2f - cost of FP = %d, cost of FN = %d", threshold, cost_of_fp, cost_of_fn)
grid.arrange(p_roc, p_cost, ncol=2, sub=textGrob(sub_title, gp=gpar(cex=1), just="bottom"))
}
plot_roc(roc, 0.7, 1, 2)
plot_roc(roc, 0.6, 1, 2)
